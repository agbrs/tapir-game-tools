use crate::{
    tokens::{FileId, LexicalError, Span},
    types::Type,
    Message,
};

use serde::Serialize;

#[derive(Clone, Copy, Hash, PartialEq, Eq, Debug, Serialize)]
pub struct SymbolId(pub usize);

pub type Fix = agb_fixnum::Num<i32, 8>;

#[derive(Clone, Debug, Serialize)]
pub struct Statement<'input> {
    pub span: Span,
    pub kind: StatementKind<'input>,
}

#[derive(Clone, Debug, Default, Serialize)]
pub enum StatementKind<'input> {
    Error(Message),
    VariableDeclaration {
        ident: &'input str,
        value: Box<Expression<'input>>,
    },
    Assignment {
        ident: &'input str,
        value: Box<Expression<'input>>,
    },
    Wait,
    #[default]
    Nop,

    // From here these can only be generated by the compiler
    SymbolDeclare {
        ident: SymbolId,
        value: Box<Expression<'input>>,
    },
    SymbolAssign {
        ident: SymbolId,
        value: Box<Expression<'input>>,
    },
}

impl<'input> StatementKind<'input> {
    pub fn with_span(self, file_id: FileId, start: usize, end: usize) -> Statement<'input> {
        Statement {
            span: Span::new(file_id, start, end),
            kind: self,
        }
    }
}

#[derive(Clone, Debug, Serialize)]
pub struct Expression<'input> {
    pub span: Span,
    pub kind: ExpressionKind<'input>,
}

impl<'input> From<LexicalError> for Box<Expression<'input>> {
    fn from(value: LexicalError) -> Self {
        Box::new(Expression {
            span: value.span,
            kind: ExpressionKind::Error(Message::from(value)),
        })
    }
}

#[derive(Clone, Default, Debug, Serialize)]
pub enum ExpressionKind<'input> {
    Integer(i32),
    Fix(#[serde(skip)] Fix),
    Variable(&'input str),
    BinaryOperation {
        lhs: Box<Expression<'input>>,
        operator: BinaryOperator,
        rhs: Box<Expression<'input>>,
    },
    Error(Message),
    #[default]
    Nop,

    // From here these can only be generated by the compiler
    Symbol(SymbolId),
}

impl<'input> ExpressionKind<'input> {
    pub fn with_span(self, file_id: FileId, start: usize, end: usize) -> Box<Expression<'input>> {
        Box::new(Expression {
            kind: self,
            span: Span::new(file_id, start, end),
        })
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Serialize)]
pub enum BinaryOperator {
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    RealDiv,
    RealMod,
}

impl BinaryOperator {
    pub fn can_handle_type(&self, lhs_type: Type) -> bool {
        match self {
            BinaryOperator::Add
            | BinaryOperator::Sub
            | BinaryOperator::Mul
            | BinaryOperator::Div
            | BinaryOperator::Mod
            | BinaryOperator::RealDiv
            | BinaryOperator::RealMod => matches!(lhs_type, Type::Fix | Type::Int),
        }
    }
}
