---
source: crates/tapir-script/compiler/src/compile/constant_propagation_visitor.rs
expression: script
input_file: crates/tapir-script/compiler/src/compile/snapshot_tests/constant_propagation/call_expression_poison.tapir
---
Script(
  functions: [
    Function(
      name: "@toplevel",
      span: "[span]",
      statements: [
        Statement(
          span: "[span]",
          kind: Assignment(
            ident: "int_prop",
            value: Expression(
              span: "[span]",
              kind: Integer(4),
              meta: "[meta]",
            ),
          ),
          meta: "[meta]",
        ),
        Statement(
          span: "[span]",
          kind: VariableDeclaration(
            ident: "x",
            value: Expression(
              span: "[span]",
              kind: BinaryOperation(
                lhs: Expression(
                  span: "[span]",
                  kind: BinaryOperation(
                    lhs: Expression(
                      span: "[span]",
                      kind: Integer(4),
                      meta: "[meta]",
                    ),
                    operator: Add,
                    rhs: Expression(
                      span: "[span]",
                      kind: Call(
                        name: "foo",
                        arguments: [],
                      ),
                      meta: "[meta]",
                    ),
                  ),
                  meta: "[meta]",
                ),
                operator: Add,
                rhs: Expression(
                  span: "[span]",
                  kind: Variable("int_prop"),
                  meta: "[meta]",
                ),
              ),
              meta: "[meta]",
            ),
          ),
          meta: "[meta]",
        ),
      ],
      arguments: [],
      return_types: FunctionReturn(
        types: [],
        span: "[span]",
      ),
    ),
    Function(
      name: "foo",
      span: "[span]",
      statements: [
        Statement(
          span: "[span]",
          kind: Wait,
          meta: "[meta]",
        ),
        Statement(
          span: "[span]",
          kind: Return(
            values: [
              Expression(
                span: "[span]",
                kind: Integer(4),
                meta: "[meta]",
              ),
            ],
          ),
          meta: "[meta]",
        ),
      ],
      arguments: [],
      return_types: FunctionReturn(
        types: [
          TypeWithLocation(
            t: Int,
            span: "[span]",
          ),
        ],
        span: "[span]",
      ),
    ),
  ],
)
