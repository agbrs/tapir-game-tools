---
source: crates/tapir-script/compiler/src/grammar_test.rs
expression: ast
input_file: crates/tapir-script/compiler/src/snapshot_tests/grammar/function_call_with_arguments.tapir
---
Script(
  functions: [
    Function(
      name: "@toplevel",
      span: "[span]",
      statements: [
        Statement(
          span: "[span]",
          kind: Call(
            name: "foo",
            arguments: [
              Expression(
                span: "[span]",
                kind: BinaryOperation(
                  lhs: Expression(
                    span: "[span]",
                    kind: Integer(3),
                    meta: {},
                  ),
                  operator: Add,
                  rhs: Expression(
                    span: "[span]",
                    kind: Integer(5),
                    meta: {},
                  ),
                ),
                meta: {},
              ),
              Expression(
                span: "[span]",
                kind: BinaryOperation(
                  lhs: Expression(
                    span: "[span]",
                    kind: Integer(8),
                    meta: {},
                  ),
                  operator: Sub,
                  rhs: Expression(
                    span: "[span]",
                    kind: Integer(3),
                    meta: {},
                  ),
                ),
                meta: {},
              ),
            ],
          ),
          meta: {},
        ),
      ],
      arguments: [],
      return_types: FunctionReturn(
        types: [],
        span: "[span]",
      ),
      is_event_handler: false,
    ),
    Function(
      name: "foo",
      span: "[span]",
      statements: [
        Statement(
          span: "[span]",
          kind: Wait,
          meta: {},
        ),
      ],
      arguments: [
        FunctionArgument(
          span: "[span]",
          t: TypeWithLocation(
            t: Int,
            span: "[span]",
          ),
          name: Unresolved("x"),
        ),
        FunctionArgument(
          span: "[span]",
          t: TypeWithLocation(
            t: Int,
            span: "[span]",
          ),
          name: Unresolved("y"),
        ),
      ],
      return_types: FunctionReturn(
        types: [],
        span: "[span]",
      ),
      is_event_handler: false,
    ),
  ],
)
