use crate::{
    tokens::{
        FileId, LexicalError, LexicalErrorKind, Token, Span,
    },
    ast::*,
    Message,
    reporting::{Diagnostics, ParseError},
    types::Type,
};

use num_traits::Num;

grammar<'input>(file_id: FileId, diagnostics: &mut Diagnostics);

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        wait => Token::KeywordWait,
        var => Token::KeywordVar,
        "if" => Token::KeywordIf,
        "else" => Token::KeywordElse,
        "fn" => Token::KeywordFn,
        t_integer => Token::KeywordInt,
        t_fix => Token::KeywordFix,
        t_bool => Token::KeywordBool,

        identifier => Token::Identifier(<&'input str>),
        integer => Token::Integer(<&'input str>),
        fix => Token::Fix(<&'input str>),

        true => Token::True,
        false => Token::False,

        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "(" => Token::LParen,
        ")" => Token::RParen,
        ";" => Token::Semicolon,
        "=" => Token::Assign,
        ":" => Token::Colon,
        "->" => Token::Arrow,
        "," => Token::Comma,

        "+" => Token::OperatorAdd,
        "-" => Token::OperatorSub,
        "*" => Token::OperatorMul,
        "/" => Token::OperatorDiv,
        "%" => Token::OperatorMod,
        "//" => Token::OperatorRealDiv,
        "%%" => Token::OperatorRealMod,
        "==" => Token::OperatorEqEq,
    }
}

pub Script: Script<'input> = <TopLevelStatement*> => Script::from_top_level(<>);

TopLevelStatement: TopLevelStatement<'input> = {
    <Statement> => TopLevelStatement::Statement(<>),
    <FunctionDefinition> => TopLevelStatement::FunctionDefinition(<>),
    <error: !> => {
        diagnostics.add_lalrpop(<>.error, file_id);
        TopLevelStatement::Error
    },
}

FunctionDefinition: Function<'input> =
    "fn" <name: identifier> "(" <arguments: FunctionArguments> ")" <return_types: FunctionReturn> "{" <statements: Statement*> "}" =>
        Function {
            name: MaybeResolved::Unresolved(name),
            statements,
            arguments,
            return_types,
        };

FunctionArguments: Vec<FunctionArgument<'input>> = CommaSeparated<FunctionArgument>;
FunctionArgument: FunctionArgument<'input> = 
    <start: @L> <name: identifier> ":" <t: Type> <end: @R> => FunctionArgument {
        span: Span::new(file_id, start, end),
        t,
        name: MaybeResolved::Unresolved(name),
    };
FunctionReturn: Vec<Type> = {
    () => vec![],
    "->" <Type> => vec![<>],
    "->" "(" <CommaSeparated<Type>> ")",
}

CommaSeparated<T>: Vec<T> =
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        },
    };

Type: Type = {
    t_integer => Type::Int,
    t_bool => Type::Bool,
    t_fix => Type::Fix,
    <start: @L> <ident: identifier> <end: @R> => {
        diagnostics.add_message(ParseError::UnknownType { token: ident.to_string() }.with_span(file_id, start, end));
        Type::Error
    },
}

Statement: Statement<'input> =
    <start: @L> <kind: StatementKind> <end: @R> => kind.with_span(file_id, start, end);

StatementKind: StatementKind<'input> = {
    var <ident: identifier> "=" <value: Expression> ";" => StatementKind::VariableDeclaration { <> },
    <ident: identifier> "=" <value: Expression> ";" => StatementKind::Assignment { <> },
    wait ";" => StatementKind::Wait,

    "if" <condition: Expression> <true_block: Block> <false_block: ElseBlock?> => StatementKind::If { 
        condition, true_block, false_block: false_block.unwrap_or_else(|| vec![]),
     },

    <error: !> ";" => {
        diagnostics.add_lalrpop(<>.error, file_id);
        StatementKind::Error
    }
}

Block: Vec<Statement<'input>> = "{" <Statement*> "}";
ElseBlock = "else" <Block>;

Expression: Expression<'input> = {
    #[precedence(level="1")]
    <Term>,

    #[precedence(level="2")]
    #[assoc(side="left")]
    <start: @L> <lhs: Expression> <operator: MulDiv> <rhs: Expression> <end: @R> => 
        ExpressionKind::BinaryOperation { lhs: Box::new(lhs), operator, rhs: Box::new(rhs) }.with_span(file_id, start, end),

    #[precedence(level="3")]
    #[assoc(side="left")]
    <start: @L> <lhs: Expression> <operator: AddSub> <rhs: Expression> <end: @R> => 
        ExpressionKind::BinaryOperation { lhs: Box::new(lhs), operator, rhs: Box::new(rhs) }.with_span(file_id, start, end),

    #[precedence(level="4")]
    #[assoc(side="none")]
    <start: @L> <lhs: Expression> <operator: ComparisonOp> <rhs: Expression> <end: @R> => 
        ExpressionKind::BinaryOperation { lhs: Box::new(lhs), operator, rhs: Box::new(rhs) }.with_span(file_id, start, end),
}

MulDiv: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
    "//" => BinaryOperator::RealDiv,
    "%%" => BinaryOperator::RealMod,
    "%" => BinaryOperator::Mod,
}

AddSub: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
}

ComparisonOp: BinaryOperator = {
    "==" => BinaryOperator::EqEq,
}

Term: Expression<'input> = {
    "(" <Expression> ")",
    <Num>,
    <start: @L> <ident: identifier> <end: @R> => ExpressionKind::Variable(ident).with_span(file_id, start, end),
    <start: @L> <b: Bool> <end: @R> => ExpressionKind::Bool(b).with_span(file_id, start, end),
    <start: @L> <error: !> <end: @R> => {
        diagnostics.add_message(Message::from_lalrpop(error.error, file_id));
        ExpressionKind::Error.with_span(file_id, start, end)
    }
}

Num: Expression<'input> = {
    <start: @L> <value: integer> <end: @R> => match value.parse::<i32>() {
        Ok(value) => ExpressionKind::Integer(value).with_span(file_id, start, end),
        Err(e) => {
            diagnostics.add_message(LexicalErrorKind::from(e).with_span(file_id, start, end));
            ExpressionKind::Error.with_span(file_id, start, end)
        }
    },
    <start: @L> <value: fix> <end: @R> => match Fix::from_str_radix(value, 10) {
        Ok(value) => ExpressionKind::Fix(value).with_span(file_id, start, end),
        Err(e) => {
            diagnostics.add_message(LexicalErrorKind::from(e).with_span(file_id, start, end));
            ExpressionKind::Error.with_span(file_id, start, end)
        }
    }
}

Bool: bool = {
    true => true,
    false => false,
}