---
source: crates/tapir-script/compiler/src/grammar_test.rs
expression: ast
input_file: crates/tapir-script/compiler/src/snapshot_tests/grammar/loops.tapir
---
Script(
  functions: [
    Function(
      name: "@toplevel",
      span: "[span]",
      statements: [
        Statement(
          span: "[span]",
          kind: VariableDeclaration(
            ident: "i",
            value: Expression(
              span: "[span]",
              kind: Integer(0),
              meta: {},
            ),
          ),
          meta: {},
        ),
        Statement(
          span: "[span]",
          kind: Loop(
            block: [
              Statement(
                span: "[span]",
                kind: VariableDeclaration(
                  ident: "x",
                  value: Expression(
                    span: "[span]",
                    kind: Integer(3),
                    meta: {},
                  ),
                ),
                meta: {},
              ),
              Statement(
                span: "[span]",
                kind: If(
                  condition: Expression(
                    span: "[span]",
                    kind: BinaryOperation(
                      lhs: Expression(
                        span: "[span]",
                        kind: Variable("i"),
                        meta: {},
                      ),
                      operator: Gt,
                      rhs: Expression(
                        span: "[span]",
                        kind: Integer(4),
                        meta: {},
                      ),
                    ),
                    meta: {},
                  ),
                  true_block: [
                    Statement(
                      span: "[span]",
                      kind: Break,
                      meta: {},
                    ),
                  ],
                  false_block: [],
                ),
                meta: {},
              ),
              Statement(
                span: "[span]",
                kind: Assignment(
                  ident: "i",
                  value: Expression(
                    span: "[span]",
                    kind: BinaryOperation(
                      lhs: Expression(
                        span: "[span]",
                        kind: Variable("i"),
                        meta: {},
                      ),
                      operator: Add,
                      rhs: Expression(
                        span: "[span]",
                        kind: Integer(1),
                        meta: {},
                      ),
                    ),
                    meta: {},
                  ),
                ),
                meta: {},
              ),
              Statement(
                span: "[span]",
                kind: Continue,
                meta: {},
              ),
            ],
          ),
          meta: {},
        ),
      ],
      arguments: [],
      return_types: FunctionReturn(
        types: [],
        span: "[span]",
      ),
    ),
  ],
)
