---
source: crates/tapir-script/compiler/src/compile/symtab_visitor.rs
expression: script
input_file: crates/tapir-script/compiler/src/compile/snapshot_tests/symtab_visitor/if_blocks_success.tapir
---
Script(
  functions: [
    Function(
      name: "@toplevel",
      span: "[span]",
      statements: [
        Statement(
          span: "[span]",
          kind: VariableDeclaration(
            ident: "x",
            value: Expression(
              span: "[span]",
              kind: Integer(3),
              meta: {},
            ),
          ),
          meta: {
            "compiler::ast::SymbolId": "SymbolId(1)",
          },
        ),
        Statement(
          span: "[span]",
          kind: VariableDeclaration(
            ident: "y",
            value: Expression(
              span: "[span]",
              kind: Integer(14),
              meta: {},
            ),
          ),
          meta: {
            "compiler::ast::SymbolId": "SymbolId(2)",
          },
        ),
        Statement(
          span: "[span]",
          kind: If(
            condition: Expression(
              span: "[span]",
              kind: Bool(true),
              meta: {},
            ),
            true_block: [
              Statement(
                span: "[span]",
                kind: VariableDeclaration(
                  ident: "x",
                  value: Expression(
                    span: "[span]",
                    kind: Fix,
                    meta: {},
                  ),
                ),
                meta: {
                  "compiler::ast::SymbolId": "SymbolId(3)",
                },
              ),
              Statement(
                span: "[span]",
                kind: Assignment(
                  ident: "y",
                  value: Expression(
                    span: "[span]",
                    kind: Integer(112),
                    meta: {},
                  ),
                ),
                meta: {
                  "compiler::ast::SymbolId": "SymbolId(2)",
                },
              ),
            ],
            false_block: [
              Statement(
                span: "[span]",
                kind: VariableDeclaration(
                  ident: "z",
                  value: Expression(
                    span: "[span]",
                    kind: Integer(82),
                    meta: {},
                  ),
                ),
                meta: {
                  "compiler::ast::SymbolId": "SymbolId(4)",
                },
              ),
              Statement(
                span: "[span]",
                kind: Assignment(
                  ident: "y",
                  value: Expression(
                    span: "[span]",
                    kind: Variable("z"),
                    meta: {
                      "compiler::ast::SymbolId": "SymbolId(4)",
                    },
                  ),
                ),
                meta: {
                  "compiler::ast::SymbolId": "SymbolId(2)",
                },
              ),
            ],
          ),
          meta: {},
        ),
        Statement(
          span: "[span]",
          kind: Assignment(
            ident: "x",
            value: Expression(
              span: "[span]",
              kind: Integer(12),
              meta: {},
            ),
          ),
          meta: {
            "compiler::ast::SymbolId": "SymbolId(1)",
          },
        ),
      ],
      arguments: [],
      return_types: FunctionReturn(
        types: [],
        span: "[span]",
      ),
      is_event_handler: false,
    ),
  ],
)
